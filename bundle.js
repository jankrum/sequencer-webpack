(()=>{"use strict";const t=function(t,e={},...s){const a=document.createElement(t);for(const[t,s]of Object.entries(e))a.setAttribute(t,s);for(const t of s)"string"==typeof t?a.appendChild(document.createTextNode(t)):a.appendChild(t);return a},e=[["⏮","previous"],["▶","play"],["⏸","pause"],["⏹","stop"],["⏭","next"]],s={playing:{play:!0,pause:!1,stop:!1},paused:{play:!1,pause:!0,stop:!1},stopped:{play:!1,pause:!0,stop:!0}},a=class{constructor(){this.chartTitleHeading=null,this.buttons={}}setUp(){const s=document.querySelector("#transporter"),a=this.chartTitleHeading=t("h2");s.appendChild(a);const n=t("div");s.appendChild(n);for(const[s,a]of e){const e=t("button",{},s);this.buttons[a]=e,n.appendChild(e)}}addEventListener(t,e){const s=this.buttons[t];if(!s)throw new Error(`Invalid button name: ${t}`);s.addEventListener("click",e)}send({type:t,value:e}){switch(t){case"CHANGE_CHART":this.chartTitleHeading.innerText=e.chartTitle,this.buttons.previous.disabled=!e.canPrevious,this.buttons.next.disabled=!e.canNext;break;case"CHANGE_PLAYBACK":const a=s[e];if(!a)throw new Error(`Invalid playback state: ${e}`);for(const[t,e]of Object.entries(a))this.buttons[t].disabled=e;break;default:throw new Error(`Invalid type: ${t}`)}}},n=JSON.parse('["song-1","song-2","song-3"]'),r=n.length,i=class{constructor(){this.chartIndex=0,this.subscribers=[]}setUp(){}addEventListener(t,e){if("newChart"!==t)throw new Error(`Invalid action: ${t}`);this.subscribers.push(e)}send({type:t}){switch(t){case"PREVIOUS":this.chartIndex>0&&(this.chartIndex-=1,this.newChart());break;case"NEXT":this.chartIndex<r-1&&(this.chartIndex+=1,this.newChart());break;case"INIT":console.log("INIT"),this.newChart();break;default:throw new Error(`Invalid type: ${t}`)}}newChart(){console.log(this);const t={title:`Title ${n[this.chartIndex]}`},e=t.title,s=this.chartIndex>0,a=this.chartIndex<r-1;for(const n of this.subscribers)n({chart:t,chartTitle:e,canPrevious:s,canNext:a})}},o=class{constructor(){this.playbackState="paused",this.chart=null,this.subscriptions={}}setUp(){}addEventListener(t,e){this.subscriptions[t]||(this.subscriptions[t]=[]),this.subscriptions[t].push(e)}send({type:t,value:e}){if("CHANGE_CHART"===t)return this.chart=e,console.log("playback state when changing chart",this.playbackState),void("stopped"!==this.playbackState&&this.send({type:"STOP"}));switch(this.playbackState){case"playing":switch(t){case"PAUSE":this.playbackState="paused",this.subscriptions.pause.forEach((t=>t()));break;case"STOP":this.playbackState="stopped",this.subscriptions.stop.forEach((t=>t()));break;default:throw new Error(`Cannot ${t} while playing`)}break;case"paused":switch(t){case"PLAY":this.playbackState="playing",this.subscriptions.resume.forEach((t=>t()));break;case"STOP":this.playbackState="stopped",this.subscriptions.stop.forEach((t=>t()));break;default:throw new Error(`Cannot ${t} while paused`)}break;case"stopped":if("PLAY"!==t)throw new Error(`Cannot ${t} while stopped`);this.playbackState="playing",this.subscriptions.play.forEach((t=>t()));break;default:throw new Error(`Invalid playback state: ${this.playbackState}`)}}},c=new class{constructor(){this.transporter=new a,this.paginator=new i,this.playbacker=new o}setUp(){const t=this.transporter,e=this.paginator,s=this.playbacker;t.setUp(),e.setUp(),s.setUp(),t.addEventListener("previous",(()=>{e.send({type:"PREVIOUS"})})),t.addEventListener("next",(()=>{e.send({type:"NEXT"})})),t.addEventListener("play",(()=>{s.send({type:"PLAY"})})),t.addEventListener("pause",(()=>{s.send({type:"PAUSE"})})),t.addEventListener("stop",(()=>{s.send({type:"STOP"})})),e.addEventListener("newChart",(e=>{const{chart:a,chartTitle:n,canPrevious:r,canNext:i}=e;t.send({type:"CHANGE_CHART",value:{chartTitle:n,canPrevious:r,canNext:i}}),s.send({type:"CHANGE_CHART",value:a})})),s.addEventListener("play",(()=>{t.send({type:"CHANGE_PLAYBACK",value:"playing"})})),s.addEventListener("pause",(()=>{t.send({type:"CHANGE_PLAYBACK",value:"paused"})})),s.addEventListener("resume",(()=>{t.send({type:"CHANGE_PLAYBACK",value:"playing"})})),s.addEventListener("stop",(()=>{t.send({type:"CHANGE_PLAYBACK",value:"stopped"})})),e.send({type:"INIT"})}};c.setUp(),console.log("sequencer",c)})();
//# sourceMappingURL=bundle.js.map